# Flutter 고스톱 게임 프로젝트 Cursor Rules

## 프로젝트 개요
- Flutter/Dart 기반 고스톱 카드 게임 (go_stop_app)
- Supabase 백엔드 사용 (소셜 로그인: Google, Apple)
- 게스트 모드와 정식 계정 모드 구분
- 가로 모드 전용 앱 (landscape orientation)
- 전체 화면 모드 (immersiveSticky)

## 코드 스타일 및 구조

### 파일 구조
- `lib/` 디렉토리 내에서 기능별로 폴더 분리
- `screens/` - 화면 UI 컴포넌트 (게임, 로비, 상점, 설정 등)
- `widgets/` - 재사용 가능한 위젯 (카드, 버튼, 애니메이션 등)
- `models/` - 데이터 모델 (카드 모델 등)
- `services/` - 비즈니스 로직 및 외부 서비스 (인증, 게스트 제한)
- `providers/` - 상태 관리 (Provider 패턴)
- `utils/` - 유틸리티 함수 (게임 엔진, 애니메이션, 사운드 등)
- `config/` - 설정 파일 (Supabase 설정)
- `data/` - 정적 데이터 (카드 데이터)

### 네이밍 컨벤션
- 클래스: PascalCase (예: `CardWidget`, `MatgoEngine`, `GamePage`)
- 변수/함수: camelCase (예: `playerHand`, `calculateScore`, `isAnimating`)
- 상수: SCREAMING_SNAKE_CASE (예: `MAX_PLAYERS`, `DEFAULT_COINS`)
- 파일명: snake_case (예: `card_widget.dart`, `matgo_engine.dart`)
- 열거형: PascalCase (예: `TurnPhase`, `AnimationEventType`)

### 코드 스타일
- Dart 공식 스타일 가이드 준수
- 들여쓰기: 2칸 스페이스
- 최대 줄 길이: 80자
- 모든 public API에 문서화 주석 추가
- GlobalKey 중복 오류 처리 로직 포함

## 게임 로직 규칙

### 게임 엔진 (MatgoEngine) - 절대 변경 금지
- `lib/utils/matgo_engine.dart` - 핵심 게임 로직 (절대 수정 금지)
- 턴 기반 시스템 (TurnPhase enum 사용)
- 애니메이션 이벤트 시스템 (AnimationEventType)
- **엔진 관련 수정 시 반드시 `engine.mdc` 파일 참조**

### 카드 시스템
- 카드 데이터: `lib/data/card_data.dart`
- 카드 모델: `lib/models/card_model.dart`
- 카드 이미지: `assets/cards/` 디렉토리
- 카드 타입: 광, 띠, 동물, 피, 쌍피, 보너스카드

### 게임 상태 관리
- Provider 패턴 사용 (`lib/providers/auth_provider.dart`)
- 게임 상태는 MatgoEngine에서 중앙 관리
- 애니메이션 상태는 각 화면에서 개별 관리
- 사운드 관리: `lib/utils/sound_manager.dart`

### 애니메이션 시스템
- `lib/animations.dart` - 모든 애니메이션 컴포넌트
- `lib/utils/animation_pool.dart` - 성능 최적화
- 카드 뒤집기, 이동, 획득, 특수 효과 애니메이션
- 실제 고스톱판의 손맛을 살린 자연스러운 움직임

## UI/UX 규칙

### 화면 구조
- `lib/screens/` - 모든 화면 컴포넌트
- `lib/lobby_screen.dart` - 메인 로비 화면
- `lib/go_stop_scene.dart` - 게임 보드 씬
- `lib/adaptive_scaffold.dart` - 적응형 스캐폴드

### 폰트 및 디자인
- Google Fonts 사용 (Noto Sans KR, Work Sans)
- 제목/메뉴: Work Sans Bold
- 플레이어명/설명: Noto Sans KR
- 버튼 텍스트: semi-bold, letter-spacing +0.6
- 레벨 표시: 아이콘+숫자만, 글로우 효과

### 색상 및 테마
- `lib/utils/theme_extensions.dart` - 테마 확장
- 다크/라이트 모드 완전 지원
- 카드 타입별 색상 시스템 (광: 노랑, 띠: 파랑, 동물: 초록, 피: 빨강)
- 접근성을 고려한 색상 대비

### 반응형 디자인
- `lib/screen_size.dart` 사용하여 화면 크기 감지
- 가로 모드 최적화
- 다양한 화면 크기 지원

## 백엔드 및 데이터

### Supabase 사용
- `lib/config/supabase_config.dart` - 설정 관리
- 인증: 소셜 로그인만 (Google, Apple)
- 실시간 데이터베이스 사용
- Edge Functions 활용

### 게스트 모드
- `lib/services/guest_restrictions.dart` - 제한 로직
- `GUEST_MODE_RESTRICTIONS.md` - 제한사항 문서
- 게임 모드 제한 (AI 매치만)
- 랜덤 매칭 1일 3판 제한
- 광고 보상 1일 5회 제한
- IAP 구매 불가
- 친구 기능 읽기 전용
- 고객센터 FAQ만 접근

## 테스트 및 품질

### 테스트 구조
- `test/` 디렉토리에 단위 테스트
- `integration_test/` 디렉토리에 통합 테스트
- 게임 로직 테스트 우선순위
- UI 애니메이션 테스트 포함

### 성능 최적화
- 애니메이션 풀 사용으로 성능 최적화
- 이미지 및 사운드 리소스 최적화
- 메모리 누수 방지
- GlobalKey 중복 오류 처리

## 보안 및 개인정보

### 데이터 보호
- 사용자 개인정보 최소화
- 로컬 저장소에 민감한 정보 저장 금지
- API 키는 환경변수로 관리

### 게임 보안
- 클라이언트 사이드 검증 + 서버 사이드 검증
- 치팅 방지 로직 구현
- 점수 조작 방지

## 개발 워크플로우

### 코드 리뷰
- 모든 변경사항에 대한 테스트 작성
- 성능 영향 분석
- 접근성 검토

### 배포
- Flutter 릴리즈 빌드 사용
- 코드 서명 및 보안 검증
- 단계적 배포 (스테이징 → 프로덕션)

## 특별 고려사항

### 한국어 지원
- 모든 UI 텍스트 한국어 지원
- 고스톱 게임 용어의 정확한 번역
- 문화적 맥락 고려

### 게임 규칙
- 공식 고스톱 규칙 준수
- 흔들, 폭탄, 피박, 광박 등 특수 규칙 구현
- 게임 밸런싱 지속적 개선

### 사용자 경험
- 직관적인 UI/UX
- 게임 진행 상황 명확한 표시
- 오류 상황에 대한 친화적인 메시지
- 애니메이션을 통한 몰입감 증대

### 의존성 관리
- audioplayers: ^6.5.0 (사운드 재생)
- google_fonts: ^5.0.0 (폰트)
- supabase_flutter: ^2.3.4 (백엔드)
- provider: ^6.1.2 (상태 관리)
- flutter_facebook_auth: ^6.1.1 (소셜 로그인)
- shimmer: ^3.0.0 (로딩 효과)
